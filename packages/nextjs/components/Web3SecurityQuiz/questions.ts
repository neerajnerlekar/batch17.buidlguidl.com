export type QuizQuestion = {
  id: number;
  question: string;
  choices: string[];
  correctAnswer: string; // e.g., 'A', 'B', 'C', 'D'
  reference: string;
};

export const quizQuestions: QuizQuestion[] = [
  {
    id: 1,
    question:
      'The "checks-effects-interactions" pattern is primarily designed to defend against which smart-contract vulnerability?',
    choices: ["A. Integer overflow", "B. Reentrancy", "C. Front-running", "D. Timestamp manipulation"],
    correctAnswer: "B",
    reference: "https://docs.soliditylang.org/en/v0.8.25/security-considerations.html#re-entrancy",
  },
  {
    id: 2,
    question:
      "Which Ethereum standard brings account abstraction to smart-contract wallets without changing the core protocol?",
    choices: ["A. EIP-1559", "B. EIP-170", "C. EIP-4337", "D. EIP-1167"],
    correctAnswer: "C",
    reference: "https://eips.ethereum.org/EIPS/eip-4337",
  },
  {
    id: 3,
    question:
      "Starting with Solidity 0.8.0, what happens when an addition overflows a uint256 if no special code is used?",
    choices: [
      "A. The value wraps to 0",
      "B. The tx logs a warning",
      "C. The tx reverts automatically",
      "D. SafeMath is inserted",
    ],
    correctAnswer: "C",
    reference:
      "https://blog.soliditylang.org/2020/12/16/solidity-0.8.x-breaking-changes/#checked-arithmetic-by-default",
  },
  {
    id: 4,
    question: "Which open-source library supplies the nonReentrant modifier and other ready-made security guards?",
    choices: ["A. Truffle-Contract", "B. Hardhat Toolbox", "C. OpenZeppelin Contracts", "D. Foundry Std"],
    correctAnswer: "C",
    reference: "https://docs.openzeppelin.com/contracts/5.x/security-reentrancy",
  },
  {
    id: 5,
    question: "A flash-loan attack is only possible because the borrowed funds can be -",
    choices: [
      "A. Repaid over several blocks",
      "B. Never repaid",
      "C. Repaid within the same transaction",
      "D. Swapped for ETH immediately",
    ],
    correctAnswer: "C",
    reference: "https://docs.aave.com/developers/guides/flash-loans",
  },
  {
    id: 6,
    question: "If you omit a visibility keyword on a state variable in Solidity, the variable becomes -",
    choices: ["A. public", "B. external", "C. internal", "D. private"],
    correctAnswer: "C",
    reference: "https://docs.soliditylang.org/en/v0.8.25/contracts.html#state-variable-visibility",
  },
  {
    id: 7,
    question: "Ethereum addresses are derived from which hashing algorithm applied to the public key?",
    choices: ["A. SHA-256", "B. Keccak-256", "C. RIPEMD-160", "D. Blake2b"],
    correctAnswer: "B",
    reference: "https://ethereum.stackexchange.com/a/760",
  },
  {
    id: 8,
    question:
      "Which Solidity operation can permanently delete contract code and send its remaining ETH to a beneficiary?",
    choices: ["A. revert", "B. selfdestruct", "C. invalid", "D. stop"],
    correctAnswer: "B",
    reference: "https://docs.soliditylang.org/en/v0.8.25/control-structures.html#selfdestruct",
  },
  {
    id: 9,
    question: "EIP-155 adds the chainId field to signed transactions chiefly to prevent which attack class?",
    choices: [
      "A. Replay attacks across chains",
      "B. Integer overflow",
      "C. Gas-exhaustion DoS",
      "D. Fallback reentrancy",
    ],
    correctAnswer: "A",
    reference: "https://eips.ethereum.org/EIPS/eip-155",
  },
  {
    id: 10,
    question: "EIP-170 enforces a maximum runtime byte-code size of approximately -",
    choices: ["A. 8 KB", "B. 16 KB", "C. 24 KB", "D. 32 KB"],
    correctAnswer: "C",
    reference: "https://eips.ethereum.org/EIPS/eip-170",
  },
  {
    id: 11,
    question: "A careless delegatecall to an untrusted contract most directly risks -",
    choices: [
      "A. Consuming all gas",
      "B. Permanently locking ETH",
      "C. Overwriting the caller's storage",
      "D. Re-ordering blocks",
    ],
    correctAnswer: "C",
    reference: "https://docs.soliditylang.org/en/v0.8.25/introduction-to-smart-contracts.html#delegatecall",
  },
  {
    id: 12,
    question: "Using tx.origin for authentication is dangerous because -",
    choices: [
      "A. Miners can modify it",
      "B. It leaks the original EOA to phishing contracts",
      "C. It is zero in internal calls",
      "D. It equals address(this)",
    ],
    correctAnswer: "B",
    reference: "https://blog.openzeppelin.com/tx-origin",
  },
  {
    id: 13,
    question: "Miners can manipulate block.timestamp within a range of roughly -",
    choices: ["A. ±1 s", "B. ±5 min", "C. ±15 s", "D. ±1 h"],
    correctAnswer: "C",
    reference: "https://docs.soliditylang.org/en/v0.8.25/security-considerations.html#timestamp-dependence",
  },
  {
    id: 14,
    question: 'A "sandwich" attack is a form of MEV that involves -',
    choices: [
      "A. Posting invalid sigs",
      "B. Bribing validators",
      "C. Bracketing a victim tx with two attacker txs",
      "D. Mempool spam",
    ],
    correctAnswer: "C",
    reference: "https://ethereum.org/en/developers/docs/mev/#sandwich-attacks",
  },
  {
    id: 15,
    question:
      "In the OpenZeppelin transparent-proxy pattern, when the proxy admin address makes a normal function call, the proxy will -",
    choices: [
      "A. Delegate to the implementation",
      "B. Revert or return proxy-only data",
      "C. Emit Upgraded",
      "D. Pause the contract",
    ],
    correctAnswer: "B",
    reference: "https://docs.openzeppelin.com/contracts/5.x/api/proxy#TransparentUpgradeableProxy",
  },
  {
    id: 16,
    question: "Running a solo validator on Ethereum currently requires staking at least -",
    choices: ["A. 8 ETH", "B. 16 ETH", "C. 32 ETH", "D. 64 ETH"],
    correctAnswer: "C",
    reference: "https://ethereum.org/en/staking/solo",
  },
  {
    id: 17,
    question: "Ethereum switched from PoW to PoS (The Merge) on -",
    choices: ["A. August 5 2021", "B. December 1 2020", "C. September 15 2022", "D. March 13 2023"],
    correctAnswer: "C",
    reference: "https://ethereum.org/en/history/#the-merge",
  },
  {
    id: 18,
    question: 'The dynamically calculated "base fee" introduced by EIP-1559 helps reduce -',
    choices: [
      "A. Block propagation delays",
      "B. Replay attacks",
      "C. Fee volatility & simple front-running",
      "D. Contract size",
    ],
    correctAnswer: "C",
    reference: "https://eips.ethereum.org/EIPS/eip-1559",
  },
  {
    id: 19,
    question: "The OpenZeppelin PullPayment pattern mitigates reentrancy by -",
    choices: [
      "A. Pushing ETH immediately",
      "B. Letting users withdraw ETH themselves",
      "C. Auto-pausing",
      "D. Forwarding all gas",
    ],
    correctAnswer: "B",
    reference: "https://docs.openzeppelin.com/contracts/5.x/api/payment#PullPayment",
  },
  {
    id: 20,
    question: "Solidity's .transfer method forwards exactly how much gas to the recipient?",
    choices: ["A. 0", "B. 21000", "C. 2300", "D. All remaining gas"],
    correctAnswer: "C",
    reference: "https://docs.soliditylang.org/en/v0.8.25/common-patterns.html#withdrawal-from-contracts",
  },
  {
    id: 21,
    question: "When ETH is sent to a contract with empty calldata and a receive() function exists, Solidity will -",
    choices: ["A. Call fallback()", "B. Reject the tx", "C. Invoke receive()", "D. Revert unless payable is removed"],
    correctAnswer: "C",
    reference: "https://docs.soliditylang.org/en/v0.8.25/contracts.html#receive-fallback-functions",
  },
  {
    id: 22,
    question: "The 2300-gas stipend in .transfer is usually insufficient to -",
    choices: ["A. Emit an event", "B. Call another contract", "C. Modify storage", "D. Return a value"],
    correctAnswer: "C",
    reference: "https://consensys.github.io/smart-contract-best-practices/known_attacks/#reentrancy",
  },
  {
    id: 23,
    question: "Relying on blockhash or block.timestamp for randomness is insecure mainly because -",
    choices: [
      "A. Miners can influence them",
      "B. They use too much gas",
      "C. They need Chainlink",
      "D. View-only access",
    ],
    correctAnswer: "A",
    reference: "https://docs.chain.link/docs/vrf/v2/introduction/#security-considerations",
  },
  {
    id: 24,
    question: "Wrapping arithmetic inside unchecked { ... } will -",
    choices: ["A. Enable reentrancy", "B. Skip overflow checks", "C. Shrink bytecode", "D. Force reverts"],
    correctAnswer: "B",
    reference: "https://docs.soliditylang.org/en/v0.8.25/control-structures.html#unchecked",
  },
  {
    id: 25,
    question: "The EVM limits the call-stack depth to -",
    choices: ["A. 128", "B. 512", "C. 1024", "D. 4096"],
    correctAnswer: "C",
    reference: "https://ethereum.org/en/developers/docs/evm/#evm-instructions",
  },
  {
    id: 26,
    question: "Unbounded loops that grow with storage data can eventually -",
    choices: [
      "A. Bypass constructors",
      "B. Exhaust block gas & freeze functions",
      "C. Cause underflow",
      "D. Break access control",
    ],
    correctAnswer: "B",
    reference:
      "https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/#avoid-un",
  },
  {
    id: 27,
    question: 'Using addr.call{value:x}("") instead of .transfer re-opens which classic vulnerability?',
    choices: [
      "A. Timestamp dependence",
      "B. Reentrancy via full-gas forwarding",
      "C. Short-address attack",
      "D. Signed overflow",
    ],
    correctAnswer: "B",
    reference: "https://blog.openzeppelin.com/secure-smart-contracts-with-solidify-5",
  },
  {
    id: 28,
    question: "In Solidity, require() is preferred over assert() for input validation because assert() -",
    choices: [
      "A. Is cheaper",
      "B. Is for invariants and consumes all gas on failure",
      "C. Emits events",
      "D. Can be disabled",
    ],
    correctAnswer: "B",
    reference: "https://docs.soliditylang.org/en/v0.8.25/control-structures.html#assert-and-require",
  },
  {
    id: 29,
    question: "Deleting an array of mappings fails to clear inner keys, which can -",
    choices: ["A. Trigger slashing", "B. Leave orphaned storage", "C. Shrink contract size", "D. Refund gas"],
    correctAnswer: "B",
    reference: "https://blog.openzeppelin.com/critical-bug-in-mappings-of-structs",
  },
  {
    id: 30,
    question: "A contract with no receive or fallback can still receive ETH if another contract calls -",
    choices: ["A. delegatecall", "B. selfdestruct(address)", "C. staticcall", "D. block.coinbase()"],
    correctAnswer: "B",
    reference: "https://docs.soliditylang.org/en/v0.8.25/contracts.html#receive-fallback-functions",
  },
  {
    id: 31,
    question: "Storage-slot clashes are a primary concern when upgrading contracts using -",
    choices: ["A. Diamond pattern", "B. Transparent/UUPS proxies", "C. Minimal proxies", "D. CREATE2 factories"],
    correctAnswer: "B",
    reference: "https://docs.openzeppelin.com/contracts/5.x/upgradeable#storage_gaps",
  },
  {
    id: 32,
    question: "The Pausable contract in OpenZeppelin allows owners to -",
    choices: [
      "A. Upgrade logic",
      "B. Temporarily disable state changes via modifiers",
      "C. Get VRF randomness",
      "D. Cut loop gas",
    ],
    correctAnswer: "B",
    reference: "https://docs.openzeppelin.com/contracts/5.x/api/security#Pausable",
  },
  {
    id: 33,
    question: "When calldata is non-empty and no selector matches, Solidity executes -",
    choices: ["A. receive()", "B. fallback()", "C. constructor()", "D. Nothing"],
    correctAnswer: "B",
    reference: "https://docs.soliditylang.org/en/v0.8.25/contracts.html#receive-fallback-functions",
  },
  {
    id: 34,
    question: "Destroying a critical logic contract with selfdestruct can be exploited as a -",
    choices: ["A. Flash-loan attack", "B. Denial-of-service (griefing)", "C. Commit-reveal attack", "D. Sybil attack"],
    correctAnswer: "B",
    reference:
      "https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/#selfdestru",
  },
  {
    id: 35,
    question: 'EIP-1167 "minimal proxy" contracts reduce deployment cost mainly by -',
    choices: [
      "A. Compressing bytecode",
      "B. Delegating all calls to an existing implementation",
      "C. Using CREATE2",
      "D. Removing constructor code",
    ],
    correctAnswer: "B",
    reference: "https://eips.ethereum.org/EIPS/eip-1167",
  },
  {
    id: 36,
    question: "Minimal proxy clones are -",
    choices: [
      "A. Upgradeable via upgradeTo()",
      "B. Fixed to one implementation after deployment",
      "C. Testnet-only",
      "D. Limited to 8 KB",
    ],
    correctAnswer: "B",
    reference: "https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-pattern",
  },
  {
    id: 37,
    question: "Chainlink VRF provides smart contracts with -",
    choices: ["A. Off-chain price feeds", "B. Verifiable randomness", "C. Layer-2 roll-ups", "D. Gas predictions"],
    correctAnswer: "B",
    reference: "https://docs.chain.link/docs/vrf/v2/introduction",
  },
  {
    id: 38,
    question: "The EIP-1967 standard reserves specific storage slots in proxies to -",
    choices: [
      "A. Store slashing data",
      "B. Avoid storage collisions",
      "C. Enable commit-reveal",
      "D. Compress calldata",
    ],
    correctAnswer: "B",
    reference: "https://eips.ethereum.org/EIPS/eip-1967",
  },
  {
    id: 39,
    question: "A validator who proposes two different blocks for the same slot is subject to -",
    choices: ["A. Front-running", "B. Slashing penalties", "C. Tx replay", "D. Refundable fines"],
    correctAnswer: "B",
    reference: "https://ethereum.org/en/developers/docs/consensus/consensus-layer/#slashing",
  },
  {
    id: 40,
    question: "A commit-reveal scheme combats front-running by -",
    choices: [
      "A. Encrypting calldata",
      "B. Splitting input into commit & reveal phases",
      "C. Sending meta-txs",
      "D. Using 63/64 gas rule",
    ],
    correctAnswer: "B",
    reference:
      "https://medium.com/@regis-graptin/commit-reveal-scheme-in-solidity-prevent-front-running-in-voting-auctions-dapps-6b4bd43d2478",
  },
  {
    id: 41,
    question: "The Solidity 63/64 gas-forwarding rule ensures a call passes at most -",
    choices: ["A. 63/64 of remaining gas", "B. 64 kGas", "C. 2100 gas", "D. All gas"],
    correctAnswer: "A",
    reference: "https://blog.openzeppelin.com/ethereum-gas-costs-and-memory-manipulation",
  },
  {
    id: 42,
    question: "Exceeding the 24 576-byte code-size limit causes deployment to -",
    choices: ["A. Succeed with warning", "B. Fail & revert", "C. Succeed but disable payability", "D. Disable events"],
    correctAnswer: "B",
    reference: "https://eips.ethereum.org/EIPS/eip-170",
  },
  {
    id: 43,
    question: 'An emergency "circuit breaker" in DeFi protocols is usually implemented with -',
    choices: ["A. tx.origin checks", "B. Pausable modifiers", "C. selfdestruct", "D. Removing getters"],
    correctAnswer: "B",
    reference: "https://curve.fi/files/curve-immunefi-bug-bounty.pdf",
  },
  {
    id: 44,
    question: "Which pattern delays sending ETH until a user explicitly claims it, reducing fallback-call risks?",
    choices: ["A. Push-payment", "B. Pull-payment", "C. Oracle-payment", "D. Griefing"],
    correctAnswer: "B",
    reference: "https://docs.openzeppelin.com/contracts/5.x/api/payment#PullPayment",
  },
  {
    id: 45,
    question: "The default arithmetic mode in Solidity 0.8+ is -",
    choices: ["A. Unchecked wrapping", "B. Checked with automatic revert", "C. Fixed-point", "D. Floating point"],
    correctAnswer: "B",
    reference:
      "https://blog.soliditylang.org/2020/12/16/solidity-0.8.x-breaking-changes/#checked-arithmetic-by-default",
  },
  {
    id: 46,
    question: 'A "gas griefing" attack often involves repeatedly calling a function that -',
    choices: [
      "A. Uses huge gas, blocking honest users",
      "B. Overflows an 8-bit int",
      "C. Calls an oracle",
      "D. Uses commit-reveal",
    ],
    correctAnswer: "A",
    reference: "https://consensys.github.io/smart-contract-best-practices/known_attacks/#gas-griefing",
  },
  {
    id: 47,
    question: "Which low-level function will not bubble up a revert reason and only return false on failure?",
    choices: ["A. call", "B. delegatecall", "C. staticcall", "D. send"],
    correctAnswer: "D",
    reference: "https://docs.soliditylang.org/en/v0.8.25/units-and-global-variables.html#address-send-value",
  },
  {
    id: 48,
    question: "The Solidity docs warn that any contract can receive ETH via -",
    choices: ["A. Mining or selfdestruct()", "B. Fallback only", "C. Chainlink callback", "D. Commit-reveal"],
    correctAnswer: "A",
    reference: "https://docs.soliditylang.org/en/v0.8.25/security-considerations.html#denial-of-service",
  },
  {
    id: 49,
    question: "After being slashed, a validator is eventually -",
    choices: [
      "A. Refunded",
      "B. Ejected from the active set after delay",
      "C. Upgraded to super-validator",
      "D. Given only downtime penalties",
    ],
    correctAnswer: "B",
    reference: "https://consensys.io/blog/understanding-slashing-in-ethereum-staking-its-importance-and-consequences",
  },
  {
    id: 50,
    question: "In commit-reveal, the commitment is usually stored on-chain as -",
    choices: ["A. Plaintext", "B. keccak256(secret|nonce)", "C. An ECDSA sig", "D. A base-58 CID"],
    correctAnswer: "B",
    reference: "https://docs.soliditylang.org/en/v0.8.25/common-patterns.html#commit-reveal",
  },
];
